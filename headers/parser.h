/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parser.h                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mrouves <mrouves@42angouleme.fr>           +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/19 22:29:18 by mrouves           #+#    #+#             */
/*   Updated: 2025/02/24 20:57:32 by mrouves          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PARSER_H
# define PARSER_H

# include <lexer.h>

# define NB_STATE	28
# define NB_NTERM	7
# define NB_TERM	13
# define NB_PROD	19

typedef enum e_n_terminal
{
	NT_PROGRAM		= 0,
	NT_LIST			= 1,
	NT_PIPELINE		= 2,
	NT_CMD_REDIR	= 3,
	NT_CMD_WORD		= 4,
	NT_CMD			= 5,
	NT_SUBSHELL		= 6,
}	t_n_terminal;

typedef enum e_action_type
{
	ACT_ERROR	= 0,
	ACT_SHIFT	= 1,
	ACT_REDUCE	= 2,
	ACT_ACCEPT	= 3,
}	t_action_type;

typedef enum e_ast_type
{
	AST_CMD		= 0,
	AST_PIPE	= 1,
	AST_AND		= 2,
	AST_OR		= 3,
	AST_REDIR	= 4,
}	t_ast_type;

typedef enum e_ast_redir
{
	AST_OUT	= 0,
	AST_IN	= 1,
	AST_APP	= 2,
}	t_ast_redir;

typedef union u_ast_expression
{
	struct
	{
		char	**argv;
		int		argc;
	};
	struct
	{
		char		*file;
		t_ast_redir	redir;
		int			fd;
	};
}	t_ast_expression;

typedef struct s_ast_node
{
	t_ast_type			type;
	t_ast_expression	expression;
	struct s_ast_node	*left;
	struct s_ast_node	*right;
}	t_ast_node;

typedef struct s_parse_trace
{
	int			state;
	t_ast_node	*node;
}	t_parse_trace;

typedef struct s_parse_action
{
	t_action_type	type;
	int				value;
}	t_action;

typedef struct s_parser
{
	t_ast_node	*ast;
	t_stack		stack;
	uint32_t	token_id;
}	t_parser;

t_n_terminal	lalr_get_prod(int rule);
int				lalr_get_rhs(int rule);
int				lalr_get_goto(int rule, int state);
t_action		lalr_get_action(int state, t_terminal term);
int				lalr_parse(t_parser *parser, t_collection *tokens);

# define PRODUCTIONS "\x0\x1\x1\x1\x2\x2\x3\x3\x3\x4\x4\x4\x4\x5\x5\x5\x5\x5\x6"
# define RHS_LENS	"\x1\x3\x3\x1\x3\x1\x2\x2\x2\x1\x1\x1\x1\x1\x1\x2\x2\x1\x3"

# define GOTO_VALUES "\
\x00\x01\x02\x05\x04\x03\x06\
\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x13\x12\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x14\x00\x00\
\x00\x00\x00\x00\x15\x00\x00\
\x00\x00\x00\x00\x16\x00\x00\
\x00\x17\x02\x05\x04\x03\x06\
\x00\x00\x18\x05\x04\x03\x06\
\x00\x00\x19\x05\x04\x03\x06\
\x00\x00\x00\x05\x04\x1a\x06\
\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x13\x12\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\
"

# define ACTION_VALUES "\
\x00\x00\x00\x0b\x0c\x0d\x07\x08\x09\x0a\x0e\x00\x00\
\x0f\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x03\x03\x11\x00\x00\x00\x00\x00\x00\x00\x00\x03\x03\
\x05\x05\x05\x0b\x0c\x0d\x07\x08\x09\x0a\x00\x05\x05\
\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x00\x0d\x0d\
\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x0e\x0e\
\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x00\x11\x11\
\x09\x09\x09\x09\x09\x09\x09\x09\x09\x09\x00\x09\x09\
\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x00\x0a\x0a\
\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x00\x0b\x0b\
\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x00\x0c\x0c\
\x00\x00\x00\x00\x00\x00\x07\x08\x09\x0a\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x07\x08\x09\x0a\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x07\x08\x09\x0a\x00\x00\x00\
\x00\x00\x00\x0b\x0c\x0d\x07\x08\x09\x0a\x0e\x00\x00\
\x00\x00\x00\x0b\x0c\x0d\x07\x08\x09\x0a\x0e\x00\x00\
\x00\x00\x00\x0b\x0c\x0d\x07\x08\x09\x0a\x0e\x00\x00\
\x00\x00\x00\x0b\x0c\x0d\x07\x08\x09\x0a\x0e\x00\x00\
\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x00\x0f\x0f\
\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x00\x10\x10\
\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x00\x06\x06\
\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x00\x07\x07\
\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x00\x08\x08\
\x0f\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\
\x01\x01\x11\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\
\x02\x02\x11\x00\x00\x00\x00\x00\x00\x00\x00\x02\x02\
\x04\x04\x04\x0b\x0c\x0d\x07\x08\x09\x0a\x00\x04\x04\
\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x00\x12\x12\
"

# define ACTION_TYPES "\
\x0\x0\x0\x1\x1\x1\x1\x1\x1\x1\x1\x0\x0\
\x1\x1\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x3\
\x2\x2\x1\x0\x0\x0\x0\x0\x0\x0\x0\x2\x2\
\x2\x2\x2\x1\x1\x1\x1\x1\x1\x1\x0\x2\x2\
\x2\x2\x2\x2\x2\x2\x2\x2\x2\x2\x0\x2\x2\
\x2\x2\x2\x2\x2\x2\x2\x2\x2\x2\x0\x2\x2\
\x2\x2\x2\x2\x2\x2\x2\x2\x2\x2\x0\x2\x2\
\x2\x2\x2\x2\x2\x2\x2\x2\x2\x2\x0\x2\x2\
\x2\x2\x2\x2\x2\x2\x2\x2\x2\x2\x0\x2\x2\
\x2\x2\x2\x2\x2\x2\x2\x2\x2\x2\x0\x2\x2\
\x2\x2\x2\x2\x2\x2\x2\x2\x2\x2\x0\x2\x2\
\x0\x0\x0\x0\x0\x0\x1\x1\x1\x1\x0\x0\x0\
\x0\x0\x0\x0\x0\x0\x1\x1\x1\x1\x0\x0\x0\
\x0\x0\x0\x0\x0\x0\x1\x1\x1\x1\x0\x0\x0\
\x0\x0\x0\x1\x1\x1\x1\x1\x1\x1\x1\x0\x0\
\x0\x0\x0\x1\x1\x1\x1\x1\x1\x1\x1\x0\x0\
\x0\x0\x0\x1\x1\x1\x1\x1\x1\x1\x1\x0\x0\
\x0\x0\x0\x1\x1\x1\x1\x1\x1\x1\x1\x0\x0\
\x2\x2\x2\x2\x2\x2\x2\x2\x2\x2\x0\x2\x2\
\x2\x2\x2\x2\x2\x2\x2\x2\x2\x2\x0\x2\x2\
\x2\x2\x2\x2\x2\x2\x2\x2\x2\x2\x0\x2\x2\
\x2\x2\x2\x2\x2\x2\x2\x2\x2\x2\x0\x2\x2\
\x2\x2\x2\x2\x2\x2\x2\x2\x2\x2\x0\x2\x2\
\x1\x1\x0\x0\x0\x0\x0\x0\x0\x0\x0\x1\x0\
\x2\x2\x1\x0\x0\x0\x0\x0\x0\x0\x0\x2\x2\
\x2\x2\x1\x0\x0\x0\x0\x0\x0\x0\x0\x2\x2\
\x2\x2\x2\x1\x1\x1\x1\x1\x1\x1\x0\x2\x2\
\x2\x2\x2\x2\x2\x2\x2\x2\x2\x2\x0\x2\x2\
"

#endif
